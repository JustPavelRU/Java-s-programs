Игра "Тетрис"


Игра построена на двух классах. Класс "MainGame" отвечает за игровое поле. Класс "Figure" отвечает за фигуру.
Обмен данными между классами осуществляется следующим образом:
 - Figure --> MainGame: координаты фигуры(Ссылка копируется в figureCoordinates), Координаты тени фигуры(Ссылка не копируется).
 - Figure <-- MainGame: координаты упавших фигур(Ссылка не копируется).
Для итерационных переменных существуют свои стандарты:
 - p, q - координаты.
 - n - итерация массива координат.
* Движением является любое изменение координат(т.е. поворот также является движением).


Класс "MainGame" (статичный)

Переменные:
 - height - высота игрового поля. Используется для упрощения изменения высоты поля.
 - field - графическая отрисовка поля. Является целочисленным двумерным массивом символов. Используется для
отрисовки игрового поля, информации об очках и последующих фигурах.
 - droppedFiguresCoordinates - координаты упавших фигур. Явлляется булевым двумерным массивом. Используется для
хранения информации об упавших фигурах. Каждое значение true означает наличие на данной координате сегмента упавшей
фигуры.

 - figure - ссылка на фигуру. Являяется объектом класса Figure. Используется для доступа к данным фигуры(Координаты
фигуры и координаты тени фигуры).
 - figureNext - ссылка на следующую фигуру. Являяется объектом класса Figure. Используется для хранения данных
о следующей фигуре и оповещения игрока о следующей фигуре.
 - figureCoordinates - координаты фигуры. Являяется ссылкой на целочисленный двумерный массив. Используется для
упрощения доступа к координатам. Каждый элемент главного массива хранит в себе координаты (p, q) соответствущего
сегмента фигуры.
 - figureStore - все доступные типы фигур. Являяется массивом символов(строкой). Используется для рандомизированного
создания фигур.

 - score - хранение очков.

Методы:
 - showField() - отрисовка поля, фигуры, сегментов упавших фигур, счета и следующей фигуры. Все начинается с заполнения
пустого поля, далее на него накладываются(изменяются) символы в соответствии с их принадлежностью. Затем результат
выводится на экран.
 - isLineFull() - проверка заполненности линии. В случае заполненность линии возвращает true.
 - isCollision() - проверка столкновения по горизонтали. В случае захода фигуры в границу поля или в сегмент упавшей
фигуры возвращает true.
 - getDroppedFiguresCoordinates() - возвращает ссылку на массив координат упавших фигур.

Метод main:
Основной метод, в котором происходит выполнение всей программы.


Класс "Figure" (нестатичный)

Переменные:
 - coordinates - координаты фигуры.
 - type - тип фигуры.
 - step - шаг хода. Используется для того, чтобы фигура падала через определенное количество ходов(влево, вправо, поворот)

Методы:
 - Figure(type) - конструктор класса. Создает фигуру по переданному типу.
 - Figure(Figure figure) - конструктор класса, который создает копию объекта, ссылка на который передана в параметры.
 - move() - движение фигуры. Принимает в качестве аргумента команду (WASDR) и исполняет ее. В методе также есть
шаги(step), которые увеличиваются на единицу после каждого хода. В случае кратности шага фигура падает на одну клетку
вниз.
 - rotate() - вращение фигуры. У фигуры есть центр(это второй подмассив). Относительно этого центра проверяется
каждая ячейка на наличие там сегмента. Если сегмент обнаружен, то он поворачивается по заранее заданному шаблону.
 - isBottomClean() - проверяет пространство под фигурой. Если под ней находится дно поля или упавшая фигура(или ее
сегмент), то возвращает false. Используется для проверки падения фигуры/завершения игры.
 - getShadowCoordinates() - создает и возвращает координаты тени. Принцип работы заключается в создании копии фигуры
и ее падения(figure.move('W')).
 - getCoordinates() - возвращает ссылку на массив координат фигуры.
 - getType() - возвращает ссылку на тип фигуры.